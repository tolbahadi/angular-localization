{"version":3,"sources":["angular-localization.js"],"names":["angular","window","document","undefined","module","constant","value","en","service","$injector","$http","$q","$log","$rootScope","$window","localeConf","localeEvents","localeSupported","localeFallbacks","isToken","str","length","TOKEN_REGEX","test","getPath","tok","path","split","result","slice","join","getKey","getBundle","i","bundles","loadBundle","token","root","url","basePath","currentLocale","_loading","fileExtension","get","success","data","key","hasOwnProperty","$broadcast","resourceUpdates","deferrences","resolve","error","bundleReady","bundle","langFile","defer","promise","ready","paths","deferred","outstanding","isString","isArray","Error","forEach","push","all","applySubstitutions","text","subs","res","firstOfKind","sub","replace","v","k","getLocalizedString","txt","A","isValidToken","indexOf","delimiter","fromJson","isObject","info","updateHtmlTagLangAttr","lang","$html","attr","setLocale","trim","isUndefined","defaultLocale","localeChanges","cookieStore","put","cookieName","getLocale","RegExp","element","body","parent","persistSelection","has","navigator","userLanguage","language","getString","filter","locale","i18nFilter","input","args","$stateful","directive","$sce","setText","elm","tag","html","getTrustedHtml","update","string","optArgs","then","scope","attrs","hasObservers","$observe","newVal","oldVal","$attr","normAttr","observableAttrs","i18n","$on","elem","updateText","target","attributes","exp","values","$eval","langFiles","lastValues","$set","i18nAttr","sharedDictionary","this"],"mappings":"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","file":"angular-localization.min.js","sourcesContent":["/*!\n * angular-localization :: v1.3.1 :: 2015-09-03\n * web: http://doshprompt.github.io/angular-localization\n *\n * Copyright (c) 2015 | Rahul Doshi\n * License: MIT\n */\n;(function (angular, window, document, undefined) {\r\n    'use strict';\r\n\nangular.module('ngLocalize.Version', [])\r\n    .constant('localeVer', '1.3.1');\nangular.module('ngLocalize', ['ngSanitize', 'ngLocalize.Config', 'ngLocalize.Events', 'ngLocalize.InstalledLanguages']);\r\n\nangular.module('ngLocalize.InstalledLanguages', [])\r\n    .value('localeSupported', [\r\n        'en-US'\r\n    ])\r\n    .value('localeFallbacks', {\r\n        'en': 'en-US'\r\n    });\nangular.module('ngLocalize')\r\n    .service('locale', ['$injector', '$http', '$q', '$log', '$rootScope', '$window', 'localeConf', 'localeEvents', 'localeSupported', 'localeFallbacks', function ($injector, $http, $q, $log, $rootScope, $window, localeConf, localeEvents, localeSupported, localeFallbacks) {\r\n        var TOKEN_REGEX = new RegExp('^[\\\\w\\\\.-]+\\\\.[\\\\w\\\\s\\\\.-]+\\\\w(:.*)?$'),\r\n\r\n            $html = angular.element(document.body).parent(),\r\n            currentLocale,\r\n            deferrences,\r\n            bundles,\r\n            cookieStore;\r\n\r\n        if (localeConf.persistSelection && $injector.has('$cookieStore')) {\r\n            cookieStore = $injector.get('$cookieStore');\r\n        }\r\n\r\n        function isToken(str) {\r\n            return (str && str.length && TOKEN_REGEX.test(str));\r\n        }\r\n\r\n        function getPath(tok) {\r\n            var path = tok ? tok.split('.') : '',\r\n                result = '';\r\n\r\n            if (path.length > 1) {\r\n                result = path.slice(0, -1).join('.');\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function getKey(tok) {\r\n            var path = tok ? tok.split('.') : [],\r\n                result = '';\r\n\r\n            if (path.length) {\r\n                result = path[path.length - 1];\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function getBundle(tok) {\r\n            var result = null,\r\n                path = tok ? tok.split('.') : [],\r\n                i;\r\n\r\n            if (path.length > 1) {\r\n                result = bundles;\r\n\r\n                for (i = 0; i < path.length - 1; i++) {\r\n                    if (result[path[i]]) {\r\n                        result = result[path[i]];\r\n                    } else {\r\n                        result = null;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function loadBundle(token) {\r\n            var path = token ? token.split('.') : '',\r\n                root = bundles,\r\n                url = localeConf.basePath + '/' + currentLocale,\r\n                i;\r\n\r\n            if (path.length > 1) {\r\n                for (i = 0; i < path.length - 1; i++) {\r\n                    if (!root[path[i]]) {\r\n                        root[path[i]] = {};\r\n                    }\r\n                    root = root[path[i]];\r\n                    url += '/' + path[i];\r\n                }\r\n\r\n                if (!root._loading) {\r\n                    root._loading = true;\r\n\r\n                    url += localeConf.fileExtension;\r\n\r\n                    $http.get(url)\r\n                        .success(function (data) {\r\n                            var key,\r\n                                path = getPath(token);\r\n                            // Merge the contents of the obtained data into the stored bundle.\r\n                            for (key in data) {\r\n                                if (data.hasOwnProperty(key)) {\r\n                                    root[key] = data[key];\r\n                                }\r\n                            }\r\n\r\n                            // Mark the bundle as having been \"loaded\".\r\n                            delete root._loading;\r\n\r\n                            // Notify anyone who cares to know about this event.\r\n                            $rootScope.$broadcast(localeEvents.resourceUpdates);\r\n\r\n                            // If we issued a Promise for this file, resolve it now.\r\n                            if (deferrences[path]) {\r\n                                deferrences[path].resolve(path);\r\n                            }\r\n                        })\r\n                        .error(function () {\r\n                            $log.error('[localizationService] Failed to load: ' + url);\r\n\r\n                            // We can try it again later.\r\n                            delete root._loading;\r\n                        });\r\n                }\r\n            }\r\n        }\r\n\r\n        function bundleReady(path) {\r\n            var bundle,\r\n                token;\r\n\r\n            path = path || localeConf.langFile;\r\n            token = path + '._LOOKUP_';\r\n\r\n            bundle = getBundle(token);\r\n\r\n            if (!deferrences[path]) {\r\n                deferrences[path] = $q.defer();\r\n            }\r\n\r\n            if (bundle && !bundle._loading) {\r\n                deferrences[path].resolve(path);\r\n            } else {\r\n                if (!bundle) {\r\n                    loadBundle(token);\r\n                }\r\n            }\r\n\r\n            return deferrences[path].promise;\r\n        }\r\n\r\n        function ready(path) {\r\n            var paths,\r\n                deferred,\r\n                outstanding;\r\n\r\n            if (angular.isString(path)) {\r\n                paths = path.split(',');\r\n            } else if (angular.isArray(path)) {\r\n                paths = path;\r\n            } else {\r\n                throw new Error('locale.ready requires either an Array or comma-separated list.');\r\n            }\r\n\r\n            if (paths.length > 1) {\r\n                outstanding = [];\r\n                paths.forEach(function (path) {\r\n                    outstanding.push(bundleReady(path));\r\n                });\r\n                deferred = $q.all(outstanding);\r\n            } else {\r\n                deferred = bundleReady(path);\r\n            }\r\n\r\n            return deferred;\r\n        }\r\n\r\n        function applySubstitutions(text, subs) {\r\n            var res = text,\r\n                firstOfKind = 0;\r\n\r\n            if (subs) {\r\n                if (angular.isArray(subs)) {\r\n                    angular.forEach(subs, function (sub, i) {\r\n                        res = res.replace('%' + (i + 1), sub);\r\n                        res = res.replace('{' + (i + 1) + '}', sub);\r\n                    });\r\n                } else {\r\n                    angular.forEach(subs, function (v, k) {\r\n                        ++firstOfKind;\r\n\r\n                        res = res.replace('{' + k + '}', v);\r\n                        res = res.replace('%' + k, v);\r\n                        res = res.replace('%' + (firstOfKind), v);\r\n                        res = res.replace('{' + (firstOfKind) + '}', v);\r\n                    });\r\n                }\r\n            }\r\n            res = res.replace(/\\n/g, '<br>');\r\n\r\n            return res;\r\n        }\r\n\r\n        function getLocalizedString(txt, subs) {\r\n            var result = '',\r\n                bundle,\r\n                key,\r\n                A,\r\n                isValidToken = false;\r\n\r\n            if (angular.isString(txt) && !subs && txt.indexOf(localeConf.delimiter) !== -1) {\r\n                A = txt.split(localeConf.delimiter);\r\n                txt = A[0];\r\n                subs = angular.fromJson(A[1]);\r\n            }\r\n\r\n            isValidToken = isToken(txt);\r\n            if (isValidToken) {\r\n                if (!angular.isObject(subs)) {\r\n                    subs = [subs];\r\n                }\r\n\r\n                bundle = getBundle(txt);\r\n                if (bundle && !bundle._loading) {\r\n                    key = getKey(txt);\r\n\r\n                    if (bundle[key]) {\r\n                        result = applySubstitutions(bundle[key], subs);\r\n                    } else {\r\n                        $log.info('[localizationService] Key not found: ' + txt);\r\n                        result = '%%KEY_NOT_FOUND%%';\r\n                    }\r\n                } else {\r\n                    if (!bundle) {\r\n                        loadBundle(txt);\r\n                    }\r\n                }\r\n            } else {\r\n                result = txt;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        function updateHtmlTagLangAttr(lang) {\r\n            lang = lang.split('-')[0];\r\n\r\n            $html.attr('lang', lang);\r\n        }\r\n\r\n        function setLocale(value) {\r\n            var lang;\r\n\r\n            if (angular.isString(value)) {\r\n                value = value.trim();\r\n                if (localeSupported.indexOf(value) !== -1) {\r\n                    lang = value;\r\n                } else {\r\n                    lang = localeFallbacks[value.split('-')[0]];\r\n                    if (angular.isUndefined(lang)) {\r\n                        lang = localeConf.defaultLocale;\r\n                    }\r\n                }\r\n            } else {\r\n                lang = localeConf.defaultLocale;\r\n            }\r\n\r\n            if (lang !== currentLocale) {\r\n                bundles = {};\r\n                deferrences = {};\r\n                currentLocale = lang;\r\n\r\n                updateHtmlTagLangAttr(lang);\r\n\r\n                $rootScope.$broadcast(localeEvents.localeChanges, currentLocale);\r\n                $rootScope.$broadcast(localeEvents.resourceUpdates);\r\n\r\n                if (cookieStore) {\r\n                    cookieStore.put(localeConf.cookieName, lang);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getLocale() {\r\n            return currentLocale;\r\n        }\r\n\r\n        setLocale(cookieStore && cookieStore.get(localeConf.cookieName) ? cookieStore.get(localeConf.cookieName) : $window.navigator.userLanguage || $window.navigator.language);\r\n\r\n        return {\r\n            ready: ready,\r\n            isToken: isToken,\r\n            getPath: getPath,\r\n            getKey: getKey,\r\n            setLocale: setLocale,\r\n            getLocale: getLocale,\r\n            getString: getLocalizedString\r\n        };\r\n    }]);\r\n\nangular.module('ngLocalize')\r\n    .filter('i18n', ['locale', function (locale) {\r\n        var i18nFilter = function (input, args) {\r\n            return locale.getString(input, args);\r\n        };\r\n\r\n        i18nFilter.$stateful = true;\r\n\r\n        return i18nFilter;\r\n    }]);\r\n\nangular.module('ngLocalize.Events', [])\r\n    .constant('localeEvents', {\r\n        resourceUpdates: 'ngLocalizeResourcesUpdated',\r\n        localeChanges: 'ngLocalizeLocaleChanged'\r\n    });\nangular.module('ngLocalize')\r\n    .directive('i18n', ['$sce', 'locale', 'localeEvents', 'localeConf', function ($sce, locale, localeEvents, localeConf) {\r\n        function setText(elm, tag) {\r\n            if (tag !== elm.html()) {\r\n                elm.html($sce.getTrustedHtml(tag));\r\n            }\r\n        }\r\n\r\n        function update(elm, string, optArgs) {\r\n            if (locale.isToken(string)) {\r\n                locale.ready(locale.getPath(string)).then(function () {\r\n                    setText(elm, locale.getString(string, optArgs));\r\n                });\r\n            } else {\r\n                setText(elm, string);\r\n            }\r\n        }\r\n\r\n        return function (scope, elm, attrs) {\r\n            var hasObservers;\r\n\r\n            attrs.$observe('i18n', function (newVal, oldVal) {\r\n                if (newVal && newVal !== oldVal) {\r\n                    update(elm, newVal, hasObservers); \r\n                }\r\n            });\r\n\r\n            angular.forEach(attrs.$attr, function (attr, normAttr) {\r\n                if (localeConf.observableAttrs.test(attr)) {\r\n                    attrs.$observe(normAttr, function (newVal) {\r\n                        if (newVal || !hasObservers || !hasObservers[normAttr]) {\r\n                            hasObservers = hasObservers || {};\r\n                            hasObservers[normAttr] = attrs[normAttr];\r\n                            update(elm, attrs.i18n, hasObservers);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            scope.$on(localeEvents.resourceUpdates, function () {\r\n                update(elm, attrs.i18n, hasObservers);\r\n            });\r\n            scope.$on(localeEvents.localeChanges, function () {\r\n                update(elm, attrs.i18n, hasObservers);\r\n            });\r\n        };\r\n    }])\r\n    .directive('i18nAttr', ['locale', 'localeEvents', function (locale, localeEvents) {\r\n        return function (scope, elem, attrs) {\r\n            var lastValues = {};\r\n\r\n            function updateText(target, attributes) {\r\n                var values = scope.$eval(attributes),\r\n                    langFiles = [],\r\n                    exp;\r\n\r\n                for(var key in values) {\r\n                    exp = values[key];\r\n                    if (locale.isToken(exp) && langFiles.indexOf(locale.getPath(exp)) === -1) {\r\n                        langFiles.push(locale.getPath(exp));\r\n                    }\r\n                }\r\n\r\n                locale.ready(langFiles).then(function () {\r\n                    var value = '';\r\n\r\n                    for(var key in values) {\r\n                        exp = values[key];\r\n                        value = locale.getString(exp);\r\n                        if (lastValues[key] !== value) {\r\n                            attrs.$set(key, lastValues[key] = value);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            attrs.$observe('i18nAttr', function (newVal) {\r\n                if (newVal) {\r\n                    updateText(elem, newVal); \r\n                }\r\n            });\r\n\r\n            scope.$on(localeEvents.resourceUpdates, function () {\r\n                updateText(elem, attrs.i18nAttr);\r\n            });\r\n            scope.$on(localeEvents.localeChanges, function () {\r\n                updateText(elem, attrs.i18nAttr);\r\n            });\r\n        };\r\n    }]);\r\n\nangular.module('ngLocalize.Config', [])\r\n    .value('localeConf', {\r\n        basePath: 'languages',\r\n        defaultLocale: 'en-US',\r\n        sharedDictionary: 'common',\r\n        fileExtension: '.lang.json',\r\n        persistSelection: true,\r\n        cookieName: 'COOKIE_LOCALE_LANG',\r\n        observableAttrs: new RegExp('^data-(?!ng-|i18n)'),\r\n        delimiter: '::'\r\n    });\n}(this.angular, this, this.document));\r\n"],"sourceRoot":"/source/"}